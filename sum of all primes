The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.

def prime_factors(n):
    i = 2
    factors = []                       # declare an empty list
    while i * i <= n:                     # Outer while loop
        if n % i:                        
            i += 1
        else:
            n //= i 
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors
    
def sum_factors(factors):
    return sum(factors)
    
## Alternate code

def genfactors(n):
    n = 20
    i = 2        # Initialize the value of 2
    
    while i*i < n:
        while n%i == 0:
            n = n/i
        i = i + 1
    print(n)
    
 # then proceed to sum the factors
    
 # This explanation uses two while loops. The biggest thing to remember about while loops is that they run until they are no longer true.

The outer loop states that while i * i isn't greater than n (because the largest prime factor will never be larger than the square root of n), add 1 to i after the inner loop runs.

The inner loop states that while i divides evenly into n, replace n with n divided by i. This loop runs continuously until it is no longer true. For n=20 and i=2, n is replaced by 10, then again by 5. Because 2 doesn't evenly divide into 5, the loop stops with n=5 and the outer loop finishes, producing i+1=3.

Finally, because 3 squared is greater than 5, the outer loop is no longer true and prints the result of n.
